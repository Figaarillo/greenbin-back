// src/config/swagger.config.ts
import { type SwaggerOptions } from '@fastify/swagger'
import { type FastifySwaggerUiOptions } from '@fastify/swagger-ui'
import EnvVar from './env-var.config'

export const SwaggerConfig: SwaggerOptions = {
  openapi: {
    openapi: '3.0.0',
    info: {
      title: 'GreenBin API Documentation',
      description:
        // eslint-disable-next-line quotes
        "This documentation provides a detailed overview of all the endpoints available in the GreenBin API. You'll find information on how to use the endpoints, the required parameters, the expected responses, and example requests and responses. The GreenBin API facilitates the management of waste collection and recycling processes. This API allows users to register, manage waste collection data, and retrieve various related information.",
      version: '0.1.0',
      contact: {
        name: 'Support Team',
        email: 'glom.tech.24@gmail.com'
        // url: 'https://greenbin.com/support'
      },
      license: {
        name: 'Licensed under MIT',
        url: 'https://opensource.org/licenses/MIT'
      }
    },
    servers: [
      {
        url: `http://${EnvVar.server.host}:${EnvVar.server.port}`,
        description: 'Development server'
      }
      // {
      //   url: 'https://api.greenbin.com',
      //   description: 'Production server'
      // }
    ],
    tags: [
      { name: 'user', description: 'User related endpoints, such as registration and authentication.' },
      { name: 'code', description: 'Code related endpoints, such as management and verification.' },
      { name: 'waste', description: 'Waste management related endpoints, including collection and recycling data.' },
      { name: 'statistics', description: 'Endpoints for retrieving statistical data and reports.' }
    ],
    components: {
      securitySchemes: {
        apiKey: {
          type: 'apiKey',
          name: 'apiKey',
          in: 'header'
        }
      },
      schemas: {
        Entity: {
          type: 'object',
          properties: {
            id: { type: 'string', description: 'Unique identifier for the user. Generated by the server.' },
            name: { type: 'string', description: 'Name that identifies the Entity.' },
            password: { type: 'string', description: 'Password for the user account.' },
            description: { type: 'string', description: 'Description of the Entity.' },
            city: { type: 'string', description: 'City where the Entity is located.' },
            province: { type: 'string', description: 'Province where the Entity is located.' }
          },
          required: ['name', 'description', 'password', 'city', 'province']
        },
        Responsible: {
          type: 'object',
          properties: {
            id: { type: 'string', description: 'Unique identifier for the responsible. Generated by the server.' },
            firstname: { type: 'string', description: 'First name of the responsible.' },
            lastname: { type: 'string', description: 'Last name of the responsible.' },
            username: { type: 'string', description: 'Username of the responsible.' },
            email: { type: 'string', description: 'Email address of the responsible.' },
            password: { type: 'string', description: 'Password for the responsible account.' },
            dni: { type: 'number', description: 'DNI of the responsible.' },
            phoneNumber: { type: 'string', description: 'Phone number of the responsible.' }
          },
          required: ['firstname', 'lastname', 'username', 'email', 'password', 'dni', 'phoneNumber']
        },
        WasteCategory: {
          type: 'object',
          properties: {
            id: { type: 'string', description: 'Unique identifier for the waste collection record.' },
            name: { type: 'string', description: 'Name of the waste category.' },
            description: { type: 'string', description: 'Description of the waste category.' }
          },
          required: ['name', 'description']
        }
      }
    },
    externalDocs: {
      url: 'https://swagger.io',
      description: 'For more information about Swagger'
    }
  }
}

export const SwaggerUiConfig: FastifySwaggerUiOptions = {
  routePrefix: '/documentation',
  uiConfig: {
    docExpansion: 'list',
    deepLinking: false
  },
  staticCSP: true,
  transformStaticCSP: (header: any) => header,
  transformSpecification: (swaggerObject: any, _request: any, _reply: any) => {
    return swaggerObject
  },
  transformSpecificationClone: true
}
